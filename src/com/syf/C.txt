program func funcs
funcs func funcs
funcs $
func type ID ( args ) func_body
type type'
type UNSIGNED type'
type' INT
type' CHAR
type' FLOAT
type VOID
arr' [ NUM ]
arr arr'
arr $
arr1' [ exp ]
arr1 arr1'
arr1 $
args type ID arg
args $
arg , type ID arg
arg $
func_body ;
func_body block
block { define_stmts sens }
define_stmts define_stmt define_stmts
define_stmts $
define_stmt type ID arr vars ;
vars , ID arr vars
vars $
sens sen sens
sens $
sen order_sen
sen jump_sen
sen iteration_sen
sen branch_sen
order_sen exp ;
jump_sen CONTINUE ;
jump_sen BREAK ;
jump_sen RETURN isnull_exp ;
isnull_exp exp
isnull_exp $
iteration_sen WHILE ( exp ) block_sen
iteration_sen FOR ( isnull_exp ; isnull_exp ; isnull_exp ) block_sen
iteration_sen DO block_sen WHILE ( exp ) ;
branch_sen IF ( exp ) block_sen branch_sen'
branch_sen' ELSE block_sen
branch_sen' $
branch_sen SWITCH ( var ) { case_sens default_sen }
case_sens case_sen case_sens
case_sens $
case_sen CASE const : sens
default_sen DEFAULT : sens
default_sen $
block_sen { sens }
exp var = exp'
exp var ADD_ASSIGN exp'
exp var SUB_ASSIGN exp'
exp var MULTI_ASSIGN exp'
exp var DIV_ASSIGN exp'
exp var MOD_ASSIGN exp'
exp exp'
var ID arr1
exp' exp' OR_OP exp''
exp' exp''
exp'' exp'' AND_OP exp1
exp'' exp1
exp1 exp1 > exp1'
exp1 exp1 GE_OP exp1'
exp1 exp1 < exp1'
exp1 exp1 LE_OP exp1'
exp1 exp1 EQ_OP exp1'
exp1 exp1 NE_OP exp1'
exp1 exp1'
exp1' exp1' + exp1''
exp1' exp1' - exp1''
exp1' exp1''
exp1'' exp1'' * exp2
exp1'' exp1'' / exp2
exp1'' exp1'' % exp2
exp1'' exp2
exp2 ! value
exp2 value
value ( exp )
value var
value const
value ID ( actual_args )
actual_args $
actual_args exp actual_args'
actual_args' , exp actual_args'
actual_args' $
const NUM
const REAL
const CHAR_CONST
const STR